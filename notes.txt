1. Entity türü dış dünyaya gönderilmez. View model ya da DTO'lar gönderilir. Dış dünyaya gönderilecek olan türler, modeller ayrı bir katman olarak tanımlanmalıdır.

2. .Net servis mimarilerinde healthCheck yapılır. Özet olarak clienttan toplu olarak requestler gönderilecekse 100 tane 1000 tane her birinin timeout süresini beklemek yerine önce healthCheck 
yapıp sonrasında toplu istek gönderebiliriz. Eğer tek istek göndereceksek healthCheck etmeye gerek 
olmayabilir. 

3. Start.up classı Extension metotlarla kapsüllenmelidir.

4. DTO'lar, View Modallar için mapping işlemlerini automapper gibi kütüphaneler ile yapılmalı.

5. Cache her zaman projeye dahil edilmeli.

6. Controller içinde KESİNLİKLE algoritma/iş operasyonu YAPILMAZ!.

7. Mimarisel tasarımlar kullanılmalı.

----------------------------------------
----------------------------------------

Onion Architecture

1. Entityler en iç katman olan domain katmanında tanımlanır.
2. Dış katman iç katmanlara erişebilir. İç katman dışa aktarım yapamaz.
3. Dış katman müümküm mertebe bir önceki katmandan almaya çalışır ama şart değil, en içteki 
   katmandan almaya çalışıyor.
4. Onion architecture bağımlılıkta tercih hakkı kullanmanı sağlar.
5. Onion Katmanları;
	1-Domain => Mimarinin merkezi katmanıdır. Tüm uygulama için olan Domain entitylerini
			    bu katmanda oluşturulacaktır.
    
    2-Application => Bu katman Domain katmanı ile uygulamnın iş katmanı arasında bir 
    				 soyutlama katmanıdır. Bir servis oluşturmadan önce o servisin kurallarını 
    				 interface'ler ile belirliyoruz. Gerçek servislerin soyutlamaların yapılacağı 
    				 katman. (Interface(IRepository,UnitOfWork,Abstract Class), Response Objecti DTO Object, Mapping, Request Parameters Object,Validations, Custom Exception.) Uygulamanın genelinde kullanılan katmanları applicationda tanımlanır. 

Application ve Domain katmanları Core katmanları olarak geçer. Appliacation katmanı, Domain katmanını
referans alır.

	3-Persistance => Applicationdakiş interfacelerin, abstract classların implemente edildiği katmandır.
					 Bu katmanda gerçek implamantasyonlar/servisler burada tanımlanır. Data odaklı servisler bu katmanda tanımlanır. Domain ile ilişkisi olan işlemler burada tanımlanır. (DbContext, Migration, Seeding, İnterface İmplemantation, UnitOfWork,Repository)
    
    3.1-Infrastructure => Sisteme eklenecek dış yapılanmalarla etkileme girecek classlar bu katmana dahil edelicek. Domain alanı dışında kalan işlemler bu katmanda yapılır. (E-mail,Notification, Tckimlk Doprulama, Ödeme)

    3.2-Presantation => Sunum yapıldığı katman.

Yatay düzlemler birbirini referans alabilir. Dıştaki katmanlar içtekileri referans alabilir. içteki katman dıştakini referans alamaz.

------------->

.net notları

-> açılan klasörler sanaldır gerçek klasör altına class gelene kadar oluşmaz













